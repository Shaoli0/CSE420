# -*- coding: utf-8 -*-
"""lab3 and lab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T7h2xIy56NhaW4o5KQfUWxQ8CkuS4oMk
"""

import re

#lab3
inp = open("input_lab3.txt", "r").read().split("\n")

numEx = int(inp[0])
regex = inp[1:numEx+1]
numStr = int(inp[numEx+1])
strings = inp[numEx+2:]

flag = [0] * numStr

for value in range(len(strings)):
    for i in range(len(regex)):
        pattern = re.compile(regex[i])
        match = pattern.search(strings[value])

        try:
            check = match.group(0)
        except:
            check = match

        if check == strings[value]:
            flag[value] = i + 1

for i in flag:
    if i == 0:
        print(f"NO, {i}")
    else:
        print(f"YES, {i}")

#lab4
def findMethod(word):

    access = ["public", "private", "protected", "default"]
    datatype = ["int", "float", "void", "boolean", "char", "String"]

    step = 0
    string = ""
    s2 = ""
    method_lst = []

    for i in range(len(word)):

        if(word[i] == " " or word[i] == "\n" or word[i] == "\t"):

            if (step == 0 and string in access):
                s2 += string + "-"
                step = 1

            elif (step == 1):

                if string == "static":
                    pass
                elif string in datatype:
                    s2 += string + "-"
                    step = 2
                else:
                    s2 = ""
                    step = 0

            elif (step == 2):

                if (word[i] == " "):

                    templst = string.split("(")
                    if templst[0] == 'main':
                        s2 = ""
                        step = 0
                    elif word[i+1] == "(":
                        s2 += string
                    else:
                        s2 += string + " "

                if (word[i] == "\n"):
                    templst = string.split("(")
                    if templst[0] != 'main':
                        s2 += string
                        temp = s2.split("-")
                        temp[-1] = temp[-1].strip(" ;{}")
                        if temp not in method_lst:
                            method_lst.append(temp)

                    s2 = ""
                    step = 0

            string = ""

        else:
            string += word[i]

    return method_lst




x= open("input_lab4.txt", "r").read()

lst = findMethod(list(x))

lst.sort()

#lst.sort(key = lambda x : x[-1].split("(")[0])

print("Methods: ")
for i in lst:
    print(f"{i[-1]}, return type: {i[-2]}")